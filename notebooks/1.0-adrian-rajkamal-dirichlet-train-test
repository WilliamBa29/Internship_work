{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "sys.path.insert(0,'D:\\Documents\\OneDrive\\Documents\\Data Science\\MaxKelsen\\csenergy-internship')\n",
    "from src.helpers.slicingdata import formatting\n",
    "from src.helpers.slicingdata import week\n",
    "from src.helpers.slicingdata1 import rearrange\n",
    "from src.helpers.frequency import relfreq\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1152\n",
      "1152\n",
      "576\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "DIR_BASE = 'D:/documents'\n",
    "FILE_HISTORY = os.path.join(DIR_BASE, \"CapPrice.csv\")\n",
    "df_=pd.read_csv(FILE_HISTORY)\n",
    "\n",
    "s=np.empty(len(df_),dtype=object)\n",
    "s[df_.iloc[:,3]>0]=1\n",
    "s[df_.iloc[:,3]==0]=0\n",
    "#df_=df_.iloc[range(0,15000),:]\n",
    "#m=df_.iloc[:,0].str[3:6]\n",
    "#arr = np.empty(len(df_), dtype=object)\n",
    "#arr[m=='Jan']=1\n",
    "#arr[m=='Feb']=2\n",
    "#arr[m=='Mar']=3\n",
    "#arr[m=='Apr']=4\n",
    "#arr[m=='May']=5\n",
    "#arr[m=='Jun']=6\n",
    "#arr[m=='Jul']=7\n",
    "#arr[m=='Aug']=8\n",
    "#arr[m=='Sep']=9\n",
    "#arr[m=='Oct']=10\n",
    "#arr[m=='Nov']=11\n",
    "#arr[m=='Dec']=12\n",
    "#x=week(1,df_,arr)\n",
    "#data2,E,s=formatting(df_,'Jan',2010)\n",
    "#2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021\n",
    "#,rearrange(10,df_)\n",
    "rel_freqs_train,freqs_train=relfreq(df_,'Non Workdays',(2010,2011,2012,2013,2014,2015,2016,2017,\n",
    "                                                        2018,\n",
    "                                                   2019),\n",
    "            ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))\n",
    "rel_freqs_test,freqs_test=relfreq(df_,'Non Workdays',(2020),\n",
    "            ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))\n",
    "#x,x1=relfreq(df_,'Non Workdays',(2010),('May','Jun','Jul','Aug','Sep','Oct'))\n",
    "#print(E==0)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0\n",
      " 1 0 0 0 0 0 0 0 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "#print((freqs_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from src.modelling.simple_dirichlet_model_adrian_rajkamal import posterior_mean\n",
    "means=posterior_mean(freqs_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0\n",
      " 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0\n",
      " 0.3333333333333333 0.5 0.0 0.16666666666666666 0.0 0.0 0.0 0.0 0.0 0.0\n",
      " 0.0 0.0 0.0 0.0]\n",
      "[0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.05555555555555555, 0.07407407407407407, 0.018518518518518517, 0.037037037037037035, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517, 0.018518518518518517]\n"
     ]
    }
   ],
   "source": [
    "print(rel_freqs_test)\n",
    "print(means)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'x' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)",
      "\u001B[1;32m~\\AppData\\Local\\Temp/ipykernel_6084/3154884589.py\u001B[0m in \u001B[0;36m<module>\u001B[1;34m\u001B[0m\n\u001B[0;32m      2\u001B[0m \u001B[1;32mfrom\u001B[0m \u001B[0mmatplotlib\u001B[0m\u001B[1;33m.\u001B[0m\u001B[0mticker\u001B[0m \u001B[1;32mimport\u001B[0m \u001B[0mFormatStrFormatter\u001B[0m\u001B[1;33m\u001B[0m\u001B[1;33m\u001B[0m\u001B[0m\n\u001B[0;32m      3\u001B[0m \u001B[1;32mfrom\u001B[0m \u001B[0mmatplotlib\u001B[0m\u001B[1;33m.\u001B[0m\u001B[0mticker\u001B[0m \u001B[1;32mimport\u001B[0m \u001B[0mLogFormatter\u001B[0m\u001B[1;33m\u001B[0m\u001B[1;33m\u001B[0m\u001B[0m\n\u001B[1;32m----> 4\u001B[1;33m \u001B[0mz\u001B[0m\u001B[1;33m=\u001B[0m\u001B[1;33m[\u001B[0m\u001B[0my\u001B[0m\u001B[1;33m[\u001B[0m\u001B[0mi\u001B[0m\u001B[1;33m]\u001B[0m \u001B[1;32mfor\u001B[0m \u001B[0mi\u001B[0m \u001B[1;32min\u001B[0m \u001B[0mrange\u001B[0m\u001B[1;33m(\u001B[0m\u001B[1;36m0\u001B[0m\u001B[1;33m,\u001B[0m\u001B[0mlen\u001B[0m\u001B[1;33m(\u001B[0m\u001B[0mx\u001B[0m\u001B[1;33m)\u001B[0m\u001B[1;33m)\u001B[0m \u001B[1;32mif\u001B[0m \u001B[0mx\u001B[0m\u001B[1;33m[\u001B[0m\u001B[0mi\u001B[0m\u001B[1;33m]\u001B[0m\u001B[1;33m!=\u001B[0m\u001B[1;36m0\u001B[0m\u001B[1;33m]\u001B[0m\u001B[1;33m\u001B[0m\u001B[1;33m\u001B[0m\u001B[0m\n\u001B[0m\u001B[0;32m      5\u001B[0m \u001B[0mprint\u001B[0m\u001B[1;33m(\u001B[0m\u001B[0mz\u001B[0m\u001B[1;33m)\u001B[0m\u001B[1;33m\u001B[0m\u001B[1;33m\u001B[0m\u001B[0m\n\u001B[0;32m      6\u001B[0m \u001B[0mfig\u001B[0m \u001B[1;33m=\u001B[0m \u001B[0mplt\u001B[0m\u001B[1;33m.\u001B[0m\u001B[0mfigure\u001B[0m\u001B[1;33m(\u001B[0m\u001B[1;33m)\u001B[0m\u001B[1;33m\u001B[0m\u001B[1;33m\u001B[0m\u001B[0m\n",
      "\u001B[1;31mNameError\u001B[0m: name 'x' is not defined"
     ]
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "from matplotlib.ticker import FormatStrFormatter\n",
    "from matplotlib.ticker import LogFormatter\n",
    "z=[y[i] for i in range(0,len(x)) if x[i]!=0]\n",
    "print(z)\n",
    "fig = plt.figure()\n",
    "ax=plt.subplot(111)\n",
    "#fig,ax=plt.subplots()\n",
    "ax.loglog(rel_freqs_test,means, '.')\n",
    "formatter = LogFormatter(labelOnlyBase=False, minor_thresholds=(2, 0.4))\n",
    "ax.xaxis.set_minor_formatter(formatter)\n",
    "ax.yaxis.set_minor_formatter(formatter)\n",
    "#FrmatStrFormatter(\"%.2f\")\n",
    "fig.suptitle('Exceedance Event Relative Frequencies For Each Interval Plotted Against the Exceedance Event Posterior Probability Expectation')\n",
    "plt.xlabel('Exceedence Event Relative Frequencies')\n",
    "plt.ylabel('Exceedance Event Posterior Probability Expectation')\n",
    "#plt.tick_params(axis='y', which='minor')\n",
    "#plt.tick_params(axis='x', which='minor')\n",
    "#subsx=[0.5, 1.0, 1.5]\n",
    "#ax.set_xscale('log')\n",
    "#ax.set_yscale('log')\n",
    "#ax.set_xticks([10^(-2)])\n",
    "#ax.set_yticks([10^(-2)])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2 1 2]\n"
     ]
    }
   ],
   "source": [
    "x=np.array([3,4,6])\n",
    "x[[0,1,2]]=[2,1,2]\n",
    "print(x)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
